<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>decorator on Evgeny Roskach&#39;s blog</title>
    <link>https://genyrosk.github.io/tags/decorator/</link>
    <description>Recent content in decorator on Evgeny Roskach&#39;s blog</description>
    <image>
      <title>Evgeny Roskach&#39;s blog</title>
      <url>https://avatars.githubusercontent.com/u/9571838?v4</url>
      <link>https://avatars.githubusercontent.com/u/9571838?v4</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 05 Mar 2023 22:10:14 +0900</lastBuildDate><atom:link href="https://genyrosk.github.io/tags/decorator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Python Context Managers</title>
      <link>https://genyrosk.github.io/posts/python-context-managers/</link>
      <pubDate>Sun, 05 Mar 2023 22:10:14 +0900</pubDate>
      
      <guid>https://genyrosk.github.io/posts/python-context-managers/</guid>
      <description>Originally posted on 2020-04-04
A real problem I encountered While learning to use Python Context Managers, I encountered a neat use case for them. At the time I was writing a data pipeline that was heavily querying an API and I would often quickly reach the API quota limits and the script would abruptly quit. My initial solution was to catch the exception and implement a loop that would try again after a time delay.</description>
    </item>
    
  </channel>
</rss>
